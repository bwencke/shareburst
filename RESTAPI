NOTE: The goal of using a REST API is to create an interface between the client and server that is both simple and robust. I would recommend looking into using http://restlet.org/ instead of parsing headers yourself.

REST API:

	USERS: Used to create users, update users, get user information, login, and delete users.

		request: PUT /users/
		request body: the user who is being updated or created
		response: the user who is being updated or created

		A REST REQUEST BODY FOR A USER SHOULD LOOK LIKE:
		{
			"userName": "bwencke",
			"password": "passypass",
			"firstName": "Ben",
			"lastName": "Wencke",
			"preferences": {
				"orange": 5,
				"pink": 0,
				"red": 3,
				"yellow": 4
			}
		}

		request: GET /users/{user}
		response: the user whose username matches {user}

		A REST RESPONSE FOR A USER SHOULD LOOK LIKE:
		{
			"userName": "bwencke",
			"firstName": "Ben",
			"lastName": "Wencke",
			"preferences": {
				"orange": 5,
				"pink": 0,
				"red": 3,
				"yellow": 4
			}
		}
		
		request: PUT /users/login/
		request body: the user who is trying to log in
		response: a boolean representing whether the userName and password match
		
		A REST REQUEST FOR A USER LOGIN SHOULD LOOK LIKE:
		{
			"userName": "bwencke",
			"password": "unicornfarts"
		}

		request: DELETE /users/
		request body: the userName of the user to be deleted
		response: "Success" upon success

		A REST REQUEST BODY FOR A USER SHOULD LOOK LIKE:
		{
			"userName": "bwencke"
		}

	GROUPS: Used to group users and assign Starbursts.

		request: PUT /groups/
		request body: the group with usernames and number of packets
		response body: the group with assignments

		A REST REQUEST BODY FOR A GROUP SHOULD LOOK LIKE:
		{
			"userNames": ["bwencke", "jdepp"],
			"nPackets": 2
		}
		
		A REST RESPONSE BODY FOR A GROUP SHOULD LOOK LIKE:
		{
			"userNames": ["bwencke", "jdepp"],
			"nPackets": 2,
			"assignments": [{
					"userName": "bwencke", 
					"orange": 3,
					"pink": 3,
					"red": 3,
					"yellow": 3
				},
				{
					"userName": "jdepp", 
					"orange": 3,
					"pink": 3,
					"red": 3,
					"yellow": 3
				}
			]
		}

AUTHENTICATION:

We can use Basic HTTP Authentication to protect security and privacy of users. It works like this:

	private String encodeCredentialsForBasicAuthorization() {
        final String userAndPassword = user.getUsername() + ":" + user.getPassword();
        final int flags = 0;
        return "Basic " + Base64.encodeToString(userAndPassword.getBytes(), flags);
    }
    
NOTE: Bryan doesn't understand the authentication part yet.

ERRORS:

In the event of an error, the server should respond with:

{
	"error": "decription of error"
}

