NOTE: The goal of using a REST API is to create an interface between the client and server that is both simple and robust. I would recommend looking into using http://restlet.org/ instead of parsing headers yourself.

REST API:

	USERS: Used to login, update preferences, and add users to a group.

		request: GET /users/
		response: array of all the users

		request: GET /users/{user}
		response: the user whose username matches {user}

		A REST RESPONSE FOR A USER SHOULD LOOK LIKE:
		{
			"userName": "bwencke",
			"firstName": "Ben",
			"lastName": "Wencke",
			"preferences": {
				"orange": 5,
				"pink": 0,
				"red": 3,
				"yellow": 4
			}
		}

		request: PUT /users/
		request body: the user who is being updated or created
		note: requires authentication if user already exists. the user must be updating himself

		A REST REQUEST BODY FOR A USER SHOULD LOOK LIKE:
		{
			"userName": "bwencke",
			"password": "passypass"
			"firstName": "Ben",
			"lastName": "Wencke",
			"preferences": {
				"orange": 5,
				"pink": 0,
				"red": 3,
				"yellow": 4
			}
		}

		request: DELETE /users/
		request body: the userName of the user to be deleted
		note: requires authentication. the user must be deleting himself

		A REST REQUEST BODY FOR A USER SHOULD LOOK LIKE:
		{
			"userName": "bwencke"
		}

	GROUPS: Used to group users and the starburst they are sharing.

		request: GET /groups/
		response: array of all the groups

		request: GET /groups/{user}
		response: array of all the groups that the user whose username is {user} belongs to

		A REST RESPONSE FOR A GROUP SHOULD LOOK LIKE:
		{
			"groupName": "The Three Musketeers",
			"solved": true,
			"users": [{
					"userName": "bwencke",
					"orange": 3,
					"pink": 1,
					"red": 5,
					"yellow": 3
				},
				{
					"userName": "jdepp",
					"orange": 4,
					"pink": 0,
					"red": 5,
					"yellow": 3
				},
				{
					"userName": "eflick",
					"orange": 0,
					"pink": 11,
					"red": 0,
					"yellow": 1
				}
			]
		}

		request: PUT /groups/
		request body: the new or updated group
		note: requires authentication if group exists. the user must belong to the group.

		A REST REQUEST BODY FOR A GROUP SHOULD LOOK LIKE:
		{
			"groupName": "The Two Musketeers",
			"solved": false,
			"users": [{
					"userName": "bwencke",
					"orange": 3,
					"pink": 1,
					"red": 5,
					"yellow": 3
				},
				{
					"userName": "jdepp",
					"orange": 4,
					"pink": 0,
					"red": 5,
					"yellow": 3
				}
			]
		}

		request: DELETE /groups/
		request body: the group to be deleted
		note: requires authentication. the user must belong to the group.

		A REST REQUEST BODY FOR A DELETE GROUP SHOULD LOOK LIKE:
		{
			"groupName": "The Two Musketeers"
		}

AUTHENTICATION:

We can use Basic HTTP Authentication to protect security and privacy of users. It works like this:

	private String encodeCredentialsForBasicAuthorization() {
        final String userAndPassword = user.getUsername() + ":" + user.getPassword();
        final int flags = 0;
        return "Basic " + Base64.encodeToString(userAndPassword.getBytes(), flags);
    }

ERRORS:

In the event of an error, the server should respond with:

{
	"error": "decription of error"
}

